==Programming Guidelines==
- Only use singleton EventBus in views/controllers, always use the HandleManager interface in presenters
so they can be mocked.
- Fire events that involves other views from the presenter (the view should not be aware of events other
than those it can handle itself (such as click events).
- Views (i.e. pages that have a anchor element) are wired together with their presenters in the controller
using events. This is done to facilitate loose coupling and to keep the custom event registration
code in one place
- UI events (click handlers...) are wired via @UIHandler. If multiple components should be invoked then
the target view will invoke its presenter which will then notify subscribers via the EventBus.
---> This mean that the EventBus is only used in the components when constructing the presenter.
- Components (i.e. UI elements that are reused across view, but are not a page by themself) wire
their presenters in their constructors. On events (fx. @UIHandler click event) they will invoke their
 presenters which will do the actual business logic and update the view as needed. This is done to
  simplyfy component creation (so that a component can be created directly by the UIBinder and need
  not be wired up by the application controller). This design is more tghtly coupled than using events
  but also significatly reduces amount of events fired and also fits better with the UIBinder functionality)
- View code should be as sequential as possible and if possible completly devoid of reduce control logic.
Excessive use of "if-else" statements in view code is usually a sign of business logic having made is way into
view code.


==Setup intelliJ==
--> Set memory to "256m" and compile output to "web facet" under GWT compilation settings
--> Add/set "<mapping directory="/Users/lt/Documents/projects/java" vcs="hg4idea" />" in the *.ipr file
--> Test REST with: curl -H "Accept: application/json" -H "Accept-language: en_GB" "http://127.0.0.1:8888/content.json"


==Open Issues==
[NEED]
===Dashboard===
---> Tab panel and spec
---> Create wizard (flow) using DeckPanel

===Security and Session===
-> Spring security login (with mock spring userdetails service)
-> http://code.google.com/p/google-web-toolkit-incubator/wiki/LoginSecurityFAQ
-> TODO Verify password on server and put user in session
-> How to protect content (Spring permissions on server side methods ?)
-> [Let userService be only accessible when non auth, and create bookmarking service for rest (this must have auth)
-> Look into multi-user sessions (since spring's @controller is a singleton) [http://developerlife.com/tutorials/?p=230]

===Server side Messages===
-> Use JSON service to serve banner i18n messeges
---> [implement stackoverflow ExternalTextResource solution]
---> add property format support. Unit test
---> Use and integration-test HTTP expires header

===Create Widgets===
-> Header (used on Login/Dashboard) use adapter pattern to change content/uibinder so we have
---> links on Login page
---> account info on dashboard (as user)
---> account info and total number of users on dashboard (as admin)
---> Footer (used on Login/Dashboard)
---> Show google/twitter style disclaimer

===Word cloud===
-> build word cloud programmatically (grab tags from backend)
---> rotate messages ala twitter?
---> Make tags clickable (use Messages.link formatter)
---> http://www.ajaxupdates.com/building-a-tag-cloud-using-the-google-web-toolkit/

===CSS===
-> Look at advanced CSS rules (fx. implement different behaviour between IE and FireFox for rounded corners)
-> Find some good use for compiled stylesheet (i.e. move alert/caption to design.css if no special use can be found).
-> Check if GWT can create CSS constants and then perhaps use these for colors ?
-> http://google-web-toolkit.googlecode.com/svn/javadoc/2.0/com/google/gwt/resources/client/CssResource.html
----
@if user.agent safari {
  .a {
    \-webkit-border-radius: 5px;
  }
} @else {
  .a {
    background: url('picture_of_border.png');
  }
}
----




[NICE]
-> On frontpage style errors for login/signup (perhaps move signup box down)
- TODO find way to minimize boilerplate code for GWT.create(Message) and getElement().setId(..)
- TODO see if you can somehow reuse validators with hibernate validation ? (if so move to backend)
---> Else create spring @aspect that can reuse them and see how to make this work with JSF/REST
- Check testing with Selenium or HTMLUnit (http://code.google.com/webtoolkit/doc/latest/DevGuideTestingHtmlUnit.html)
-> Create a content service using REST with "Accept-Language" and "if-modified-since" for timeouts
------
public class ViewMessages extends RemoteMessages {
    @override
    public ViewId getViewId() {
        return new ViewId("Front-page");
    }

    public String account(String username) {
        return fetch("M-32", username).toString();
    }

    public String bannerTitle() {
        RemoteMessage msg = fetch("M-12");
        : // do stuff with msg
        return msg.toString();
    }
}
Perhaps make into GWT compiler extension so you can use create a inf with annotations:
GWT.create(ViewMessages.class);
-- Update StackOverflow with solution
------

===Locale===
---> check http://manolocarrasco.blogspot.com/2009/11/gwt-client-side-vs-server-side-locale.html for browser
locale (and http://code.google.com/p/gwt-incubator-1-5-wiki/wiki/ServerSideLocaleSelection)

===Charting===
---> Use fusionchart in admin dashboard (update spec)
---> [Tue fushionchart JINI/JavaScript solution]
---> JQuery/GWT integration (use JQuery to fetch fusion chart data)



[CHECK UP ON]
- Use generator for remote messages http://blog.jdevelop.eu/2010/01/17/use-generators-to-create-boilerplate-code-in-gwt-20/ (use MessageFormatParser internally in rebind code)
- should resources go into public folder ?
- setting IDs in UiBinder
- using messages/constants in <Ui:Msg/Ui/Text>
- are stylesheets loaded in html file only reloaded on recompile (and should I therefor put them in gwt.xml)
- Code splitting (http://code.google.com/webtoolkit/doc/latest/ReleaseNotes.html#NewFeaturesCodeSplitting)
- decide (and check) if its OK to load styles only in UI.xml files (are they even auto applied) or if I can remove
includes in GWT xml file.



