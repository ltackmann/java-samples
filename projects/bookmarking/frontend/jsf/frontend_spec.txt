==Technology==
===Managed Beans===
* BannerAction
    - Responsibility: Get and rotate a set of messages to be used on the application banner.
    - Uses:
        1. "SystemUtils" to retrieve banner messages.
    - Scope: "Application scoped" as it should be visible in all request/response cycles.

* BookmarkAction
  - Responsibility: Manages user bookmarks (CRUD).
  - Uses:
        1. "UserManager" to handle users bookmarks.
        2. "User" to access users data
    - Scope: "Request scoped" as it's only active during the bookmark handling request

* LoginAction
    - Responsibility: validates credentials, puts user in session and updates his login timestamp.
    - Uses:
        1. "UserManager" to lookup users/credentials and change his timestamp.
        2. "Identity" to get user credentials
    - Scope: "Request scoped" as it must only retain it's values during the login request.
    - Navigation: Redirects to welcome page on successful login

* LogoutAction
    - Responsibility: Logs user out .
    - Uses:
        1. "FacesContext" to retrieve and invalidate current HTTP server session.
    - Scope: "Request scoped" as it must only retain it's values during the login request.
    - Navigation: Redirects to login/front page after logout

* SignupAction
    - Responsibility: Creates a new user account (the creation form/process also ensures the user is in session).
    - Uses:
        1. "UserManager" to create new user.
        2. "User" to hold new users unique data 
    - Scope: "Request scoped" as it must only retain it's values during the registration request.
    - Navigation: Redirects to welcome page on successful registration
    
* Identity
    - Responsibility: Data object for login credentials (this avoids having to create
        a user bean prior to actually being logged in)
    - Scope: "Request scoped" as it's only used during the login request

* User
    - Responsibility: The user for the current session
    - Scope: "Session scoped" as it must be available throughout the session lifecycle

* ViewUtils
    - Responsibility: Displays internationalized global or component specific error messages
    - Scope: "None scoped" as its only used for injection into other managed beans

* SystemUtils
    - Responsibility: Gets messages that are to be listed in the application banner
    - Scope: "None scoped" as its only used for injection into other managed beans

===Setup===
cp -a ~/Software/lib/h2-1.2.126.jar ~/Software/apache-tomcat-6.0.18/lib/


==Open Issues==
[NEED]
* Get signup form working with spring anonymous login (http://www.jroller.com/thoru/entry/a_simple_spring_security_sample)
* Use templates to eleminate duplication of header (title outputText)
* Make tag/link cloud on front page and align setup (so text does not wrap and buttons have proper margin)
* Create test data methods:
    0. Remove persistence.xml DB create (check what happens if Dialect is also removed)
    1. Create helper method that uses hibernate to recreate DB
    2. Recreate DB as in 1) and fill it with userdata
    3. Document how this is used in the setup section (together with the needed software to run project from scratch)
* Primfaces and Fushion Charts integration


[NICE]
* Use JQuery for password comparison http://forum.jquery.com/topic/using-jquery-to-validate-a-password-field
* Use Facelets for custom Tags and Tiles style templates (use for header/footer)
* Continue writing use cases with different scenarios for user and admins (perhaps mock via dreamweaver)
* Selenium for integration tests
* Internationalize app (use google translate on english strings)
* Add bean validation (check mapping/internationalization of messages in JSF)
* Should we replace SystemUtils ("none" scoped bean) with spring managed repository bean ?
* Login log so admins/managers can see last logins ?


